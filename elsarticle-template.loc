\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{图数据在现实世界广泛存在。图数据的可视化在很多领域都有其重要作用，比如在金融数据可视分析中可视化欺诈交易，探索社交媒体网络中的信息传播，以及展示生物网络中的蛋白质互相作用等等。 为了提升用户和开发者构建可视化的效率，一系列可视化构建工具被提出。特别是d3的提出，降低了基于web的可视化构建的难度，丰富了可视化社区。因此，很多图数据可视化工具也基于web进行开发。其中，节点链接图是最为广泛使用的可视化形式。}{1}
\ChangesListline {added}{Added\nobreakspace {}(pan)}{Visualization of graph data plays an important role in many fields, such as showing fraud transactions in financial data analysis\nobreakspace {}\cite {DBLP:journals/tvcg/ChenGHPNXZ19}, exploring information propagation in social media network\nobreakspace {}\cite {DBLP:conf/candt/SmithSMRBDCPG09}, and visualizing protein-protein-interaction in biological network\nobreakspace {}\cite {doncheva2012topological}. A series of visualization authoring tools have been developed to facilitate visualization generation. Notably, the proposal of d3.js\nobreakspace {}\cite {DBLP:journals/tvcg/BostockOH11} reduces the difficulty of web-based visualization authoring and enriches the visualization community. Thus, a great part of graph visualization tools are also web-based. Node-link diagrams are widely used among many graph visualization solutions, because they reveal topology and connectivities\nobreakspace {}\cite {ghoniem2004comparison}.}{1}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{节点链接图可视化拥有其特点，比如每一条链接往往链接了两个节点，用户只需控制节点的位置，其链接的位置会相应变化；节点链接图依赖于布局算法，从图数据到可视化的映射，需要用户通过布局算法来处理节点的位置摆放；针对节点的交互（比如点击和拖拽）非常普遍。开发者在使用通用的可视化工具进行开发时，需要pay effort to 处理这些问题。比如在使用D3.js进行图数据可视化时，开发者需要使用其数据驱动文档的思想将对应的数据映射到对应的可视化元素上，开发者直接面向可视化元素进行开发，没有抽象的模型来支持他控制整个图数据，可能会导致编程错误的产生。 一些图可视化构建工具，比如xxxx，良好地支持了对图数据的可视化，相对于通用的可视化工具而言，他们通过解决节点链接图的特殊需求，封装图可视化的相关接口，隐藏一部分开发者不关心的接口（比如对边的位置控制），暴露一部分图可视化特性接口（对相邻节点的访问），来提升自身的易用性。}{1}
\ChangesListline {added}{Added\nobreakspace {}(pan)}{The node-link diagrams visualization has its speciality. For example, one link in a node-link diagram connects two nodes. User only need to control the nodes' positions and related links change their positions correspondingly; node-link diagrams strongly rely on layout algorithms; interactions on nodes such as clicking and dragging are frequently needed. Developers need to pay efforts to deal with these specialities using general visualization authoring tools such as d3.js\nobreakspace {}\cite {DBLP:journals/tvcg/BostockOH11}, p5\nobreakspace {}\cite {DBLP:journals/tvcg/LiM20}, and stardust\nobreakspace {}\cite {DBLP:journals/cgf/RenLH17}. For example, when a developer uses d3.js to create a node-link diagram, s/he needs to map data elements to graphical marks using the data-drive-documents idea. The developer directly handles the visual elements and there is no hook/handler for s/he to handle the underlying graph model. It may lead to bugs. Some graph visualization authoring tools such as Cytoscape.js\nobreakspace {}\cite {DBLP:journals/bioinformatics/FranzLHDSB16} and Sigma.js\nobreakspace {}\cite {DBLP:journals/jossw/Coene18} support graph visualization efficiently. Compared to general visualization tools, tools for graph visualization encapsulate related interfaces of graph visualization, hide some unrelated interfaces (e.g. controlling the position of a link) for developers, and expose some graph-related interfaces (e.g. accessing neighborhoods of a node). They improve the usability through full-fill requirements of node-link diagrams.}{1}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{随着数据规模的增长，图可视化也需要处理更多graphical marks（比如节点和链接）。然而，现有大部分图可视化工具难以处理有较多graphical marks。根据我们的实验，它们在渲染较大规模数据集上存在延迟，这将会降低用户的accessibility。}{2}
\ChangesListline {added}{Added\nobreakspace {}(pan)}{With the growth of data scale, graph visualization authoring tools need to handle more graphical marks (e.g. nodes and links). However, most of existing tools are unable to handle a large number of graphical marks. {\color {red} According to our experiments in Section\nobreakspace {}\ref {sec:experiment}, existing graph visualization authoring tools have delays in rendering large-scale graph data (with more than ...). It reduces the user accessibility.}}{2}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{据我们所知，尚未存在一款工具，能够解决开发者易用性以及用户可访问性的问题。我们探索了图可视化的相关设计需求，设计并实现了NetV，一款基于web的高性能图可视化工具。其通过设计一系列图可视化相关的功能和接口来提高开发者易用性，并调用了GPU的高性能渲染能力来提高渲染效率以增加用户的可访问性。 通过和其他工具的对比实验，我们验证了NetV的accessibility和usability。 我们对该工具进行了开源以便开发者访问和贡献代码。}{2}
\ChangesListline {added}{Added\nobreakspace {}(pan)}{To best of our knowledge, no existing tool can address developer usability and user accessibility in the same time. We explored the design requirements of the node-link diagram visualization, designed and developed NetV.js\xspace , a web-based high-performance node-link diagram visualization library. It improves developer usability through a serials of node-link diagram related functions and interfaces and increases user accessibility by utilizing the high-performance rendering ability of the GPU. We also evaluated the usability and accessibility of NetV.js\xspace through several comparative experiments. NetV.js\xspace is now open-sourced (\url {https://netv.zjuvag.org/}) for developers to access and contribute their own code.}{2}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{为了探索NetV.js\xspace 的设计空间，我们采访了3个图可视化相关的专家，调研了一系列图可视化的工具，包括 Gephi， Cytoscape.js， Sigma.js， GraphViZ，总结了如下高性能节点链接图可视化的设计需求:}{3}
\ChangesListline {added}{Added\nobreakspace {}(pan)}{To explore the design space of NetV.js\xspace , we interviewed three graph visualization experts, investigated six graph visualization tools including Gephi\nobreakspace {}\cite {DBLP:conf/icwsm/BastianHJ09}, Pajek\nobreakspace {}\cite {DBLP:reference/snam/BatageljM14}, SNAP\nobreakspace {}\cite {leskovec2016snap}, Sigma.js\nobreakspace {}\cite {DBLP:journals/jossw/Coene18}, GraphViZ\nobreakspace {}\cite {Ellson03graphvizand}, and Cytoscape.js\nobreakspace {}\cite {DBLP:journals/bioinformatics/FranzLHDSB16}. We summarized the following design requirements for high-performance node-link diagram visualization: }{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {需要有抽象的图模型来帮助控制图可视化}: 为了简化开发者对于可视化的操作，NetV.js\xspace 需要一个抽象图模型来控制图可视化而非直接控制图可视化的元素。该模型需要支持图的以下几点特性：}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {链接关联节点}: 每条链接都会关联到两个节点是图结构最基本的特性，该特性使得绘制节点链接图可以不关心链接的位置，开发者可以专注于节点的位置修改，链接会相应联动。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {邻节点和邻接边的可访问性}: 我们在调研过程中发现，很多可视化系统中支持了高亮某个节点的邻接边和邻节点的交互。所有专家都一致同意为图模型增加邻节点和邻接边可访问功能的重要性。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {基本图论算法的支持}: 部分算法提供了一些图论的基本算法，比如计算某些度量（如节点度数，节点centrality，图直径等），或是获取两个节点之间的最短路。专家们都一致同意图论算法对于可视化的重要性，但他们部分同意实现图论算法的必要性，其中一个专家认为该功能不属于可视化渲染库所关心的需求。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {需要对拥有大量可视化元素的节点链接图提供高刷新率}: 根据我们对三位图可视化专家的采访，他们认为【对超过10万元素的大规模图有30fps以上的渲染速度】才能认为其对大规模节点链接图提供了高性能渲染的能力。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {支持不同节点和链接的样式}: 开发者往往需要在节点链接图上编码不同信息，虽然在大部分大规模图可视化案例中，圆形的节点和直线边最受欢迎，但仍然有很多节点链接图支持了不同形状的节点和不同样式的边。因此，为节点和链接赋予不同的形状和样式，能使得开发者有更多可以编码信息的空间。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {需要提供多种布局功能和自定义布局插件}：节点链接图对于布局的依赖程度不言而喻。NetV.js\xspace 需要提供一些基础的节点链接图布局。因为布局算法的多样性，NetV.js\xspace 还需能使开发者按照既定接口接入自定义布局。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {需要提供自定义标签渲染}：虽然在渲染大规模节点链接图时，为可视化元素赋予标签会导致visual clutter的问题，但开发者仍有可能采取某些策略来绘制标签，比如在屏幕内元素数量较少时自适应地绘制标签。所以，NetV.js\xspace 有必要提供标签绘制的接口。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{\textbf {需要提供基础交互模型}：虽然对于节点链接图的交互多种多样，但根据我们的调研和专家访谈，我们发现它们基本上都可以被分解为对节点、链接以及画布的交互监听。我们认为NetV.js\xspace 需要能够对节点进行拖拽、点击、鼠标悬浮的监听，对链接需要有点击和鼠标悬浮的监听，以及对画布需要能够有平移、缩放、点击的交互监听。我们还需要实现对节点链接图的可视化元素的选择功能，比如lasso。}{3}
\ChangesListline {deleted}{Deleted\nobreakspace {}(pan)}{为了完成上述的需求，我们设计实现了 NetV.js\xspace 。NetV.js\xspace 包含了三个主要部分：\textit {Graph Model Manager}、\textit {Rendering Engine}以及 \textit {Interaction Manager}。我们还将一些非核心的需求独立抽象为插件的形式方便开发者自定义调用，从而减少NetV.js\xspace 的核心代码。}{3}
